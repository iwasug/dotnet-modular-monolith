# Docker Compose configuration for production environment
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

version: '3.8'

services:
  # Production PostgreSQL with optimized settings
  postgres:
    environment:
      POSTGRES_DB: ModularMonolith_Prod
      POSTGRES_USER: ${POSTGRES_USER:-mmuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/prod-init.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Redis with persistence and optimization
  redis:
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_prod_data:/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production API with optimized settings
  api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=ModularMonolith_Prod;Username=${POSTGRES_USER:-mmuser};Password=${POSTGRES_PASSWORD};Pooling=true;MinPoolSize=10;MaxPoolSize=200;ConnectionIdleLifetime=300;ConnectionPruningInterval=10;CommandTimeout=30
      - Cache__Provider=Redis
      - Cache__Redis__ConnectionString=redis:6379,password=${REDIS_PASSWORD}
      - Cache__DefaultExpiration=01:00:00
      - Jwt__Key=${JWT_SECRET_KEY}
      - Jwt__AccessTokenExpirationMinutes=15
      - Jwt__RefreshTokenExpirationDays=7
      - Security__RequireHttps=true
      - Security__EnableSecurityHeaders=true
      - Performance__MaxConcurrentRequests=2000
      - Performance__EnableResponseCompression=true
      - Performance__EnableResponseCaching=true
      - Swagger__Enabled=false
      - HealthChecks__DetailedErrors=false
      - RateLimit__GlobalPermitLimit=200
      - RateLimit__AuthPermitLimit=3
      - Serilog__MinimumLevel__Default=Warning
    volumes:
      - api_prod_logs:/app/logs
      - /var/log/modular-monolith:/var/log/modular-monolith
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Enable Nginx for production
  nginx:
    profiles: []  # Remove profile restriction
    volumes:
      - ./nginx/prod-nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_prod_logs:/var/log/nginx
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  api_prod_logs:
    driver: local
  nginx_prod_logs:
    driver: local