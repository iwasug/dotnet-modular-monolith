using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using ModularMonolith.Roles.Domain;
using ModularMonolith.Roles.Domain.ValueObjects;

namespace ModularMonolith.Roles.Infrastructure.Configurations;

/// <summary>
/// Entity Framework configuration for RolePermission entity
/// </summary>
public class RolePermissionConfiguration : IEntityTypeConfiguration<RolePermission>
{
    public void Configure(EntityTypeBuilder<RolePermission> builder)
    {
        builder.ToTable("RolePermissions");
        
        // Primary key
        builder.HasKey(rp => rp.Id);
        builder.Property(rp => rp.Id)
            .ValueGeneratedNever(); // UUID v7 generated by BaseEntity
        
        // Value object conversions
        builder.Property(rp => rp.RoleId)
            .HasConversion(
                roleId => roleId.Value,
                value => RoleId.From(value))
            .IsRequired()
            .HasColumnName("RoleId");
            
        builder.Property(rp => rp.PermissionId)
            .IsRequired()
            .HasColumnName("PermissionId");
        
        // Base entity properties
        builder.Property(rp => rp.CreatedAt)
            .HasColumnType("timestamptz")
            .IsRequired();
            
        builder.Property(rp => rp.UpdatedAt)
            .HasColumnType("timestamptz")
            .IsRequired();
        
        // Configure the Permission relationship (this one works since PermissionId is Guid)
        builder.HasOne(rp => rp.Permission)
            .WithMany()
            .HasForeignKey(rp => rp.PermissionId)
            .OnDelete(DeleteBehavior.Cascade);
        
        // Unique constraint to prevent duplicate permission assignments
        builder.HasIndex(rp => new { rp.RoleId, rp.PermissionId })
            .IsUnique()
            .HasDatabaseName("IX_RolePermissions_RoleId_PermissionId");
        
        // Indexes for performance
        builder.HasIndex(rp => rp.RoleId)
            .HasDatabaseName("IX_RolePermissions_RoleId");
            
        builder.HasIndex(rp => rp.PermissionId)
            .HasDatabaseName("IX_RolePermissions_PermissionId");
    }
}