using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using ModularMonolith.Shared.Domain;

namespace ModularMonolith.Roles.Infrastructure.Configurations;

/// <summary>
/// Entity Framework configuration for Permission entity
/// </summary>
public class PermissionConfiguration : IEntityTypeConfiguration<Permission>
{
    public void Configure(EntityTypeBuilder<Permission> builder)
    {
        builder.ToTable("Permissions");
        
        // Primary key
        builder.HasKey(p => p.Id);
        builder.Property(p => p.Id)
            .ValueGeneratedNever(); // UUID v7 generated by BaseEntity using Guid.CreateVersion7()
        
        // Simple properties
        builder.Property(p => p.Resource)
            .HasMaxLength(100)
            .IsRequired();
            
        builder.Property(p => p.Action)
            .HasMaxLength(50)
            .IsRequired();
            
        builder.Property(p => p.Scope)
            .HasMaxLength(50)
            .IsRequired();
        
        // Base entity properties
        builder.Property(p => p.CreatedAt)
            .HasColumnType("timestamptz")
            .IsRequired();
            
        builder.Property(p => p.UpdatedAt)
            .HasColumnType("timestamptz")
            .IsRequired();
        
        // Unique constraint for Resource-Action-Scope combination
        builder.HasIndex(p => new { p.Resource, p.Action, p.Scope })
            .IsUnique()
            .HasDatabaseName("IX_Permissions_Resource_Action_Scope");
        
        // Indexes for performance
        builder.HasIndex(p => new { p.Resource, p.Action })
            .HasDatabaseName("IX_Permissions_Resource_Action");
            
        builder.HasIndex(p => p.Resource)
            .HasDatabaseName("IX_Permissions_Resource");
    }
}