// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModularMonolith.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ModularMonolith.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251005061901_initialCreate")]
    partial class initialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ModularMonolith.Authentication.Domain.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("Primary key using UUID v7 for better performance and ordering");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("Timestamp when this entity was created");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasComment("User ID who created this entity");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("Timestamp when this entity was soft deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasComment("User ID who soft deleted this entity");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("Timestamp when this entity was last updated");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasComment("User ID who last updated this entity");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_RefreshToken_CreatedAt");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_RefreshTokens_ExpiresAt_Active")
                        .HasFilter("\"IsRevoked\" = false");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_RefreshToken_IsDeleted");

                    b.HasIndex("IsRevoked")
                        .HasDatabaseName("IX_RefreshTokens_IsRevoked");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshTokens_Token_Active")
                        .HasFilter("\"IsRevoked\" = false");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_RefreshToken_UpdatedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_RefreshTokens_UserId");

                    b.HasIndex("IsDeleted", "CreatedAt")
                        .HasDatabaseName("IX_RefreshToken_IsDeleted_CreatedAt");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("ModularMonolith.Roles.Domain.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("Primary key using UUID v7 for better performance and ordering");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("Timestamp when this entity was created");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasComment("User ID who created this entity");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("Timestamp when this entity was soft deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasComment("User ID who soft deleted this entity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("Timestamp when this entity was last updated");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasComment("User ID who last updated this entity");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Role_CreatedAt");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Role_IsDeleted");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_Role_UpdatedAt");

                    b.HasIndex("IsDeleted", "CreatedAt")
                        .HasDatabaseName("IX_Role_IsDeleted_CreatedAt");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("ModularMonolith.Roles.Domain.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("PermissionId");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("RoleId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("IX_RolePermissions_PermissionId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_RolePermissions_RoleId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique()
                        .HasDatabaseName("IX_RolePermissions_RoleId_PermissionId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("ModularMonolith.Shared.Domain.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Resource")
                        .HasDatabaseName("IX_Permissions_Resource");

                    b.HasIndex("RoleId");

                    b.HasIndex("Resource", "Action")
                        .HasDatabaseName("IX_Permissions_Resource_Action");

                    b.HasIndex("Resource", "Action", "Scope")
                        .IsUnique()
                        .HasDatabaseName("IX_Permissions_Resource_Action_Scope");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("ModularMonolith.Users.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasComment("Primary key using UUID v7 for better performance and ordering");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("Timestamp when this entity was created");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasComment("User ID who created this entity");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("Timestamp when this entity was soft deleted");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasComment("User ID who soft deleted this entity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("Timestamp when this entity was last updated");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasComment("User ID who last updated this entity");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_User_CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("\"IsDeleted\" = false");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_User_IsDeleted");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_User_UpdatedAt");

                    b.HasIndex("IsDeleted", "CreatedAt")
                        .HasDatabaseName("IX_User_IsDeleted_CreatedAt");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ModularMonolith.Users.Domain.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("RoleId");

                    b.Property<Guid>("RoleId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssignedAt")
                        .HasDatabaseName("IX_UserRoles_AssignedAt");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_UserRoles_RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserRoles_UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserRoles_UserId_RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("ModularMonolith.Roles.Domain.RolePermission", b =>
                {
                    b.HasOne("ModularMonolith.Shared.Domain.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("ModularMonolith.Shared.Domain.Permission", b =>
                {
                    b.HasOne("ModularMonolith.Roles.Domain.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("ModularMonolith.Users.Domain.User", b =>
                {
                    b.OwnsOne("ModularMonolith.Users.Domain.ValueObjects.UserProfile", "Profile", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("ModularMonolith.Users.Domain.UserRole", b =>
                {
                    b.HasOne("ModularMonolith.Roles.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModularMonolith.Users.Domain.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ModularMonolith.Roles.Domain.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("ModularMonolith.Users.Domain.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
